plugins {
    id 'java'
    id "idea"
    id 'application'
    id "net.ltgt.apt" version "0.20"
//    id "io.github.kobylynskyi.codegen" version "1.3.0"
    id "io.github.conanchen.graphql.codegen" version "1.3.0"
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.protobuf'
    id 'com.bmuschko.docker-remote-api' version '3.4.4'
    id 'org.jetbrains.kotlin.jvm' version '1.3.60'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

import io.github.kobylynskyi.graphql.codegen.gradle.GraphqlCodegenGradleTask

dependencies {
    // protobuf project(':product-service-idl')
    // protobuf project(':inventory-service-idl')
    // implementation ('com.netifi:netifi-spring-boot-starter'){
    //             exclude group: 'ch.qos.logback'
    // }

    implementation "org.mapstruct:mapstruct:1.3.0.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.0.Final"

    compileOnly "org.projectlombok:lombok:1.18.8"
    annotationProcessor "org.projectlombok:lombok:1.18.8"

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf') { exclude group: 'ch.qos.logback' }
    compile("org.springframework.data:spring-data-commons") { exclude group: 'ch.qos.logback' }
    compile("org.springframework.boot:spring-boot-starter-data-redis") { exclude group: 'ch.qos.logback' }
    compile 'com.github.kstyrc:embedded-redis'

    compile("io.projectreactor:reactor-core") { exclude group: 'ch.qos.logback' }
    compile("org.springframework.data:spring-data-redis") { exclude group: 'ch.qos.logback' }

    compile("com.graphql-java-kickstart:graphql-spring-boot-starter") { exclude group: 'ch.qos.logback' }
    compile('com.graphql-java-kickstart:altair-spring-boot-starter') { exclude group: 'ch.qos.logback' }
    compile('com.graphql-java-kickstart:graphiql-spring-boot-starter') { exclude group: 'ch.qos.logback' }
    compile('com.graphql-java-kickstart:voyager-spring-boot-starter') { exclude group: 'ch.qos.logback' }

    // testing facilities
    testCompile('com.graphql-java-kickstart:graphql-spring-boot-starter-test') { exclude group: 'ch.qos.logback' }
    testCompile('io.projectreactor:reactor-test') { exclude group: 'ch.qos.logback' }

    compile('io.dgraph:dgraph4j') { exclude group: 'ch.qos.logback' }
    compile 'org.antlr:ST4'

    compile 'io.jsonwebtoken:jjwt-api'
    runtime 'io.jsonwebtoken:jjwt-impl', 'io.jsonwebtoken:jjwt-gson:0.11.1'

//    compile project (":kgis-datalake")
    implementation("com.bdlbsc:dgraph-graphql")

    // dev tools
    compile("org.springframework.boot:spring-boot-devtools")


    compile "io.github.graphql-java:graphql-java-annotations:8.0"

}

mainClassName = 'io.github.GapiApplication'


// Packaging
task buildImage(type: DockerBuildImage, dependsOn: build) {
    buildArgs = ['JAR_FILE': "${bootJar.archiveName}"]
    dockerFile = file("${projectDir}/Dockerfile")
    inputDir = file("${projectDir}")
    tags = ["gregnetifi/kgmovies-${projectDir.name}", "gregnetifi/kgmovies-${projectDir.name}:${version}"]
}


task graphqlCodegenZommon(type: GraphqlCodegenGradleTask) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/zommon-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/zommon")
    apiPackageName = "com.contentbig.graphql.zommon.api"
    modelPackageName = "com.contentbig.graphql.zommon.model"
    resolverPackageName = "com.contentbig.graphql.zommon.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = false
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenAction(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/action-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/action")
    apiPackageName = "com.contentbig.graphql.action.api"
    modelPackageName = "com.contentbig.graphql.action.model"
    resolverPackageName = "com.contentbig.graphql.action.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenAcl(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/acl-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/acl")
    apiPackageName = "com.contentbig.graphql.acl.api"
    modelPackageName = "com.contentbig.graphql.acl.model"
    resolverPackageName = "com.contentbig.graphql.acl.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]

}

task graphqlCodegenBikeshop(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/bikeshop-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/bikeshop")
    apiPackageName = "io.github.kobylynskyi.bikeshop.api"
    modelPackageName = "io.github.kobylynskyi.bikeshop.model"
    resolverPackageName = "com.contentbig.graphql.bikeshop.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "TO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenCreativework(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/creativework-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/creativework")
    apiPackageName = "com.contentbig.graphql.creativework.api"
    modelPackageName = "com.contentbig.graphql.creativework.model"
    resolverPackageName = "com.contentbig.graphql.creativework.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenEvent(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/event-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/event")
    apiPackageName = "com.contentbig.graphql.event.api"
    modelPackageName = "com.contentbig.graphql.event.model"
    resolverPackageName = "com.contentbig.graphql.event.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenGobject(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/gobject-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/gobject")
    apiPackageName = "com.contentbig.graphql.gobject.api"
    modelPackageName = "com.contentbig.graphql.gobject.model"
    resolverPackageName = "com.contentbig.graphql.gobject.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenIntangible(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/intangible-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/intangible")
    apiPackageName = "com.contentbig.graphql.intangible.api"
    modelPackageName = "com.contentbig.graphql.intangible.model"
    resolverPackageName = "com.contentbig.graphql.intangible.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenPlace(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/place-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/place")
    apiPackageName = "com.contentbig.graphql.place.api"
    modelPackageName = "com.contentbig.graphql.place.model"
    resolverPackageName = "com.contentbig.graphql.place.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}


task graphqlCodegenMessage(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/message-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/message")
    apiPackageName = "com.contentbig.graphql.message.api"
    modelPackageName = "com.contentbig.graphql.message.model"
    resolverPackageName = "com.contentbig.graphql.message.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}


task graphqlCodegenPerson(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/person-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/person")
    apiPackageName = "com.contentbig.graphql.person.api"
    modelPackageName = "com.contentbig.graphql.person.model"
    resolverPackageName = "com.contentbig.graphql.person.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", Markdown: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegendOrganization(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/organization-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/organization")
    apiPackageName = "com.contentbig.graphql.organization.api"
    modelPackageName = "com.contentbig.graphql.organization.model"
    resolverPackageName = "com.contentbig.graphql.organization.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenShoppingcart(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/shoppingcart-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/shoppingcart")
    apiPackageName = "com.contentbig.graphql.shoppingcart.api"
    modelPackageName = "com.contentbig.graphql.shoppingcart.model"
    resolverPackageName = "com.contentbig.graphql.shoppingcart.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenShoppingdoor(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/shoppingdoor-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/shoppingdoor")
    apiPackageName = "com.contentbig.graphql.shoppingdoor.api"
    modelPackageName = "com.contentbig.graphql.shoppingdoor.model"
    resolverPackageName = "com.contentbig.graphql.shoppingdoor.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenShoppingfulfill(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/shoppingfulfill-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/shoppingfulfill")
    apiPackageName = "com.contentbig.graphql.shoppingfulfill.api"
    modelPackageName = "com.contentbig.graphql.shoppingfulfill.model"
    resolverPackageName = "com.contentbig.graphql.shoppingfulfill.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenShoppingman(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/shoppingman-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/shoppingman")
    apiPackageName = "com.contentbig.graphql.shoppingman.api"
    modelPackageName = "com.contentbig.graphql.shoppingman.model"
    resolverPackageName = "com.contentbig.graphql.shoppingman.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenSoftwareapplication(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/softwareapplication-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/softwareapplication")
    apiPackageName = "com.contentbig.graphql.softwareapplication.api"
    modelPackageName = "com.contentbig.graphql.softwareapplication.model"
    resolverPackageName = "com.contentbig.graphql.softwareapplication.resolver"
    customTypesMapping = [DateTime: "java.util.Date", URL: "java.lang.String", Text: "java.lang.String", BigDecimal: "java.math.BigDecimal"]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

task graphqlCodegenTaskproject(type: GraphqlCodegenGradleTask, dependsOn: graphqlCodegenZommon) {
    graphqlSchemaPaths = ["$projectDir/src/main/resources/graphql/taskproject-schema.graphqls".toString()]
    outputDir = new File("$buildDir/generated/graphql/taskproject")
    apiPackageName = "com.contentbig.graphql.taskproject.api"
    modelPackageName = "com.contentbig.graphql.taskproject.model"
    resolverPackageName = "com.contentbig.graphql.taskproject.resolver"
    customTypesMapping = [
            DateTime: "java.util.Date"
    ]
    modelNameSuffix = "GQO"
    generateApis = true
    apiPackageImports = ["java.util", "com.contentbig.graphql.zommon.model"]
    modelPackageImports = ["java.util", "com.contentbig.graphql.zommon.model", "com.contentbig.graphql.event.model",
                           "com.contentbig.graphql.shoppingdoor.model", "com.contentbig.graphql.place.model",
                           "com.contentbig.graphql.person.model", "com.contentbig.graphql.organization.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.acl.model",
                           "com.contentbig.graphql.shoppingcart.model", "com.contentbig.graphql.message.model","com.contentbig.graphql.softwareapplication.model",
                           "com.contentbig.graphql.shoppingfulfill.model", "com.contentbig.graphql.action.model",
    ]
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc'
    }
    plugins {
        rsocketRpc {
            artifact = 'io.rsocket.rpc:rsocket-rpc-protobuf'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                rsocketRpc {}
            }
        }
    }
}


// Automatically generate GraphQL code on project build:
// compileJava.dependsOn 'graphqlCodegenBikeshop'
// compileJava.dependsOn 'graphqlCodegenBikeshop','graphqlCodegenMovie'

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    'build/generated/source/proto/main/java',
                    'build/generated/source/proto/main/rsocketRpc',
                    'build/generated/sources/annotationProcessor/java/main',
                    'build/generated/graphql/acl',
                    'build/generated/graphql/action',
                    'build/generated/graphql/creativework',
                    'build/generated/graphql/event',
                    'build/generated/graphql/gobject',
                    'build/generated/graphql/intangible',
                    'build/generated/graphql/message',
                    'build/generated/graphql/organization',
                    'build/generated/graphql/person',
                    'build/generated/graphql/place',
                    'build/generated/graphql/shoppingcart',
                    'build/generated/graphql/shoppingdoor',
                    'build/generated/graphql/shoppingfulfill',
                    'build/generated/graphql/shoppingman',
                    'build/generated/graphql/softwareapplication',
                    'build/generated/graphql/taskproject',
                    'build/generated/graphql/zommon'
            ]
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/main/java',
                       'build/generated/source/proto/main/java',
                       'build/generated/source/proto/main/rsocketRpc',
                       'build/generated/sources/annotationProcessor/java/main',
                       'build/generated/graphql/acl',
                       'build/generated/graphql/action',
                       'build/generated/graphql/creativework',
                       'build/generated/graphql/event',
                       'build/generated/graphql/gobject',
                       'build/generated/graphql/intangible',
                       'build/generated/graphql/message',
                       'build/generated/graphql/organization',
                       'build/generated/graphql/person',
                       'build/generated/graphql/place',
                       'build/generated/graphql/shoppingcart',
                       'build/generated/graphql/shoppingdoor',
                       'build/generated/graphql/shoppingfulfill',
                       'build/generated/graphql/shoppingman',
                       'build/generated/graphql/softwareapplication',
                       'build/generated/graphql/taskproject',
                       'src/test/java'
            ]
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}